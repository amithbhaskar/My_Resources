#################################################################################################################################################################
#										               UNIX Cheatsheet											    #
#################################################################################################################################################################
 
# FILE PERMISSIONS / FOLDER
Create a folder with all permissions			: mkdir -m 777 dirName
Create a file with all permissions				: touch filename.txt && chmod 755 filename.txt
Change permisssions of all files in directory 	: chmod -R 777 /dirName/abc/def
Delete Empty Folders in a directory	            : find . -type d -empty -delete
Remove files except a pattern		 			: rm -v !(*Jun*)
Move files in subfolders to current Directory 	: find . -type f -mindepth 2 -exec mv -t ./ {} + [Note that that command will overwrite any files with the same name.]
Rename a file				           			: mv /path/to/file.txt /path/to/file.xml
Creating multiple directories at once           : mkdir myfolder{1,2,3} (Ex.myfolder1, myfolder2, and myfolder3)
Merge Multiple files to 1 file		   			: cat file1 file2 file3 >> Outputfile
Find for location of a file		           		: find / -iname 'filename*'
 
# INSIDE VI EDITOR
Replace Ctrl-M characters	 : %s/^M//g
 
# FOR LOOPS
View 1st line in all txt files in a folder      : for i in `ls *.txt`;  do  echo $i;  cat $i|head -1;  done;
Remove Ctrl-M characters from Multiple files    : for i in `ls *.txt`;  do  echo $i;  sed 's/^M//g' $i >> ab_$i; mv ab_$i $i;  done;
 
# GREP COMMANDS
Find text string in multiple files	 			: egrep 'string' FileName*
Find fixed text string in multiple files        : grep -F  "****" FileName.txt
Find text string in multiple subdirectories     : grep -r 'xyz' FileName
Find symbol asterisk “*”			            : grep '[*]' FileName.txt
View Line Number of string			         	: grep -n "string" FileName.txt
View complete Line using Line Number ex.9       : sed -n '9p' FileName.txt
View File Names containing string		        : grep -l 'string' FileName*.csv
Find for AAA and BBB and CCC (in that order)    :  sed '/AAA.*BBB.*CCC/!d' FileName.txt
 
# REMOVE / REPLACE COMMANDS
Remove CTRL-M characters from a Single file in UNIX     : sed -e "s/^M//" FileName.txt > ab
Remove Blank lines                         				 -> with awk			        : awk -F, 'length>NF+1' FileName.csv >text.txt
			               -> Multiple for files	    : for i in `ls *.txt`;  do  echo $i;  awk -F, 'length>NF+1'  $i >> ab_$i; mv ab_$i $i;  done;
Remove last column in a file			 				: cat STG_EW_ISR_GIT_20180315000000.txt | cut -d '|' -f1-7  > test.txt
Remove NewLine Expr within doubleQuotes		  			: gawk -v RS='"' 'NR % 2 == 0 { gsub(/\n/, "") } { printf("%s%s", $0, RT) }' filename > outputFile    
Remove Double Quotes in a file			                : sed 's/\"//g' FileName.txt > NewFileName.txt
Remove New Line Expressions within double quotes        : sed 's/||/\|/g' FileName | awk 'NR==1{printf "%s",$0; gsub(/[^|]/,""); nlast=n=length($0); next;} nlast==n{printf "\n";nlast=0} {printf "%s",$0; gsub(/[^|]/,""); nlast+=length($0)} END{print ""}' > NewFileName
					   OR -> with awk  					: gawk -v RS='"' 'NR % 2 == 0 { gsub(/\n/, "") } { printf("%s%s", $0, RT) }' FileName
Remove comma within double quotes			   			: sed -e 's/\(\"[^",]\+\),\([^",]*\)/\1 \2/g' -e 's/\"//g' FileName
Delete the first 10 lines of a file			 			:  sed '1,10d' FileName
Replace space in filename with underscore               : for f in *\ *; do mv "$f" "${f// /_}"; done
Replace space with underscore for header only  			: sed -i -e '1s/ /_/g' FileName.txt
Replace CSV to csv in filenames		           			: for f in *CSV*; do mv "$f" "${f//CSV/csv}"; done
Replace Newline to '$' row delimiter	            	: for file in $1*  do  tr '\n' '$'  < $file >temp.$$ && mv temp.$$ $file       done
Replace ) with underscore in 1st line	             	: sed -i -e '1s/(/_/g' test.txt
Replace ( with underscore in 1st line	             	: sed -i -e '1s/(/_/g' test.txt
Replace & with underscore in 1st line	           		: sed -i -e '1s/&/_/g' test.txt
 
# VIEW / COUNT COMMANDS
View recent ran commands (Keyword)   	: history | grep Keyword
View Ctrl-M characters		            : cat -tv FileName.txt
View top N records in a txt file        : cat FileName.txt | head -1
	                     or using sed   : sed 10q FileName.txt
View bottom N records in a txt file	 	: cat FileName.txt | tail -1
	                     or using sed	: sed -e :a -e '$q;N;11,$D;ba'  FileName.txt OR sed '$!d'  FileName.txt
View last but 1 line using sed	        :  sed -e '1{$q;}' -e '$!{h;d;}' -e x  FileName.txt	         
View particular column ex.8th in csv    : awk -F "\"*,\"*" '{print $8}' FileName.csv
Sort distinct values of 8th col in csv  : cut -d ',' -f8 FileName.csv | sort | uniq
Count of unique values in column	  	: cat FileName.txt|cut -d '|' -f2| sort -u |wc -l
Count number of delimiters		   		: head -1 FileName.txt | tr "||" '\n' | wc -l
Count number of delimiters in rows      : cat FileName* | awk '{ FS = "," } ; { print NF}'|sort -u
Count Line/Word/Byte/Characters			: wc -l -w -c -m tecmint.txt
Run a shell script			            : sh FileName.sh
Run a command in background	       		: nohup abcd &
Unzip a zip file			  			: unzip *.zip
Clears Entire line                      : Ctrl+U
Clears line till end of the line.      	: Ctrl+K
Clears the word before the cursor       : Ctrl+W
Search commands history                 : Ctrl+R
Move back to last working directory     : cd - 
View only lines which match reg expr    : sed -n '/regexp/p' FileName.txt OR  sed '/regexp/!d' FileName.txt
View lines of 65 characters or longer   : sed -n '/^.\{65\}/p' FileName.txt
View lines of 65 characters or lesser   : sed -n '/^.\{65\}/!p' FileName.txt OR sed '/^.\{65\}/d' FileName.txt
View lines less than 11 columns	      	: cat FileName.txt | awk -F, 'NF>11 && $NF!=""'
 
# SFTP COMMANDS:
Check for SSH Connection						: ssh un@ip
-> if connection is not on default port(i.e. 22): sftp -oPort=custom_port_number un@ip
Copy file to local directory			        : get filename.txt
Copy full directory and all of its contents	    : get -r someDirectory
Copy & maintain permissions/access times	    : get -Pr someDirectory
Rename file while copy				       		: get remoteFile localFile
Transfer Local Files to the Remote System	    : put localFile
Copy files from current folder to remote folder : scp filepattern un@ip:/pathToFolder
To get Local's working directory in ssh/sftp    : lpwd
 
# SHELL PROCESSES
Running processes in DS server  : ps -ef | grep 'FileName.sh'
To kill running processes	    : kill -9 PIDnumber
To see Zombie Processes	        : ps -xal
Available free sizes	        : df -h
Directories of sizes	        : du -h
 
TEXT FILTERS / SUBSTITUTION:
Cut till delim ':'		            : cut -d ':' -f2 FileName.txt > NewFileName.txt
Add commas to numeric strings	    : sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta'  (Ex."1234567" to "1,234,567")
Find duplicate in particular column : cat FileName.txt |cut -d '|' -f2| sort | uniq -d
Find full row duplicates in a file  : sort FileName.txt | uniq -cd
Find duplicates in certain columns  : awk -F '|' '!seen[$1 $2]++' FileName.txt > test1.txt
Find the maximum value in the file  : cat FileName.txt | cut -d '|' -f3 | sort -nr | head -1
 
LINKS:
https://www.fastwebhost.in/blog/putty-30-useful-putty-commands-for-beginners/
http://www.grymoire.com/Unix/Sed.html
 
TERMS USED:
tee is normally used to split the output of a program so that it can be both displayed and saved in a file.
 
Cron Service - The cron daemon, or crond, stays dormant until a date/time specified in one of the config files, or crontabs which enables unix users to execute commands or scripts to run automatically at a specified time/date, either as one-time events or as recurring tasks.
To find out if it's running : ps aux | grep crond
List all your cron jobs      : crontab -l
https://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/
https://kb.iu.edu/d/afiz
 
SED:
SED command in UNIX is stands for stream editor and it can perform lot’s of function on file like, searching, find and replace, insertion or deletion. SED command in unix supports regular expression which allows it perform complex pattern matching.
sed treats multiple input files as one long stream. The following example prints the first line of the first file (one.txt) and the last line of the last file (three.txt). Use -s to reverse this behavior.
sed -n  '1p ; $p' one.txt two.txt three.txt
There are four parts to this substitute command: sed 's/day/night/' old.txt > new.txt
s	                   Substitute command
/../../                     Delimiter(can use _ or \ or :)
one	             Regular Expression Pattern Search Pattern
ONE	            Replacement string
 
An exit status of zero indicates success, and a nonzero value indicates failure. GNU sed returns the following exit status error values:
1 - Catchall for general errors
2 - Misuse of shell builtins (according to Bash documentation)
https://shapeshed.com/unix-exit-codes/
 
Cheat sheet : https://gist.github.com/LeCoupa/122b12050f5fb267e75f